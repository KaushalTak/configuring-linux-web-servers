The Rule of least privilege
Specific has only permissions required by him thats it


Becoming a super user
We don't sign in as super user / root but another user who can run command as super user  using root. helps prevent hacking


sudo vs. su
Best practice to not use su command. You can forget you are su and can do damage. No warnings are given.


Package Source list
List of various places we can go to get software. Package source list. All available package sources are listed in
cat /etc/apt/sources.list
Each of the rpos in above list will be referenced when we try to update or install new software


Updating available package list
Keep software upto date for security. Most don't update because changes may caause issue.
update by 
sudo apt-get update
The update command will run through all of the reposwe saw within /etc/apt/sources.list file, and it will check what all the software is available and what verions. THis command makes no changes to system. Just makes aware of latest software and versions


Upgrading Installed Packages
sudo apt-get upgrade
This early in the system you can upgrade everything. Later on when you actually have your web application running on this system, review list and test on non-production server.


Other Package Related Tasks
apt-get application is main interface to packages related stuff
check what by 
man apt-get
remove packages not required anymore by 
sudo apt-get autoremove
Install finger
sudo apt-get install finger


Discovering Packages
Ubuntu Packages search on website
https://packages.ubuntu.com/


Using Finger
finger displays info about users currently logged in
can pass user name to display extra info


Introduction to /etc/passwd/
Finger gets this info from /etc/passwd/. It store info about each user
cat /etc/passwd
Each line entry for single user
This is a very important file on your system! It's used to keep track of all users on the system. Run cat /etc/passwd and look at the output; each line is organized in this format:

username:password:UID:GID:UID info:home directory:command/shell

Let’s run through what each of those mean:
username: the user’s login name
password: the password, will simply be an x if it’s encrypted
user ID (UID): the user’s ID number in the system. 0 is root, 1-99 are for predefined users, and 100-999 are for other system accounts
group ID (GID): Primary group ID, stored in /etc/group.
user ID info: Metadata about the user; phone, email, name, etc.
home directory: Where the user is sent upon login. Generally /home/
command/shell: The absolute path of a command or shell (usually /bin/bash). Does not have to be a shell though!


INtroduction to User Management
It's a common pattern to diable ability to log in as root, and to only login as a different user that has the ability to use Sudo. This is a security measure since every bad guy out there knows every linux box has user named root. By disabling this account from remote login we remove a very easy attack vector. Now vagrant took care of this for us. They created a user name vagrant and we just type vagrant ssh from our terminal to automatically connect. BUt not every hosting provider is going to set something like this up for you. SO let's do this ourselves.


Creating a New User
sudo adduser student
give password: student
additional info will be asked can leave it to default or add something
confirm by
finger student


Connecting as the New User
ssh student@127.0.0.1 -p 2222
ssh --> application to connect remotely
student@ --> user
127.0.0.1 --> ip, local
-p 2222 --> port 2222
When vagrant setup our machine it automatically set up this port on our local machine to forward to the virtual machine


INtroduction to etc sudoers
Student can't run sudo
sudo cat /etc/passwd gives error
We switch back to user vagrant which can run sudo
User list allowed to do sudo is in
/etc/sudoers file
sudo cat /etc/sudoers
We see root there. In some system we can student in this file similar to how root is present using vi sudo
But ubuntu handles it differently. Bottom line says
#includedir /etc/sudoers.d
This is a common pattern helps prevent issue when distribution updates happen and /etc/sudoers file changes users lost
sudo ls /etc/sudoers.d
shows vagrant is there


Giving Sudo Access
First copy vagrant file and name it student and then edit it to replace vagrant with student inside file
sudo cp /etc/sudoers.d/vagrant /etc/sudoers.d/student
sudo nano /etc/sudoers.d/student
Now sudo works in student
sudo cat /etc/passwd works


Resetting Passwords
User can reset his password using passwd
To force student user password to expire
sudo passwd -e student


ANother Authentication Method
Hackers can try guessing user and password. Better way is key based authentication. Which depends on physical files in your local system and server


Public Key Encryption
The server sends a random message to client, client encrypts it with private key and send it back. Server will decrypt it with their public key and if that value same as they sent. everything check outs and client is authenticated.


Generating Key Pairs
We'll generate key pair on local machine. never share. if generated on server it was not always private.
We generate key using ssh-keygen
You will first be asked to give filename for the key pair --> /home/tdk/.ssh/id_rsa
Then give password --> kaushal
just in case someone happens to get these files. This pass phrase will stop them from using them.
Once done you'll see ssh-keygen has generated too files id_rsa and id_rsa.pub
We'll place id_rsa.pub on server to enable key based authentication


Supported Key Types
DSA
ECDSA
RSA
ED25519
SHA256 and MD5 are hashing algorithms that are not suitable for public key encryption


Installing Public Key
we do it manually
create .ssh in home directory of student
mkdir .ssh
This is a special directory where all of your key related files must be stored 
Then create a new file in this dir called authorized_keys
touch .ssh/authorized_keys
This is another special file that will store all of the public keys that this accound is allowed to use for authentication, with one key per line in that file
Now back on local machine
read out the contents on id_rsa.pub, copy that and paste in .ssh/authorized_keys using nano
nano .ssh/authorized_keys
student@vagrant-ubuntu-trusty-64:~$ ls -al
total 32
drwxr-xr-x 4 student student 4096 Sep 14 20:57 .
drwxr-xr-x 5 root    root    4096 Sep 14 19:59 ..
-rw------- 1 student student   21 Sep 14 20:43 .bash_history
-rw-r--r-- 1 student student  220 Sep 14 19:59 .bash_logout
-rw-r--r-- 1 student student 3637 Sep 14 19:59 .bashrc
drwx------ 2 student student 4096 Sep 14 20:14 .cache
-rw-r--r-- 1 student student  675 Sep 14 19:59 .profile
drwxrwxr-x 2 student student 4096 Sep 14 21:00 .ssh
student@vagrant-ubuntu-trusty-64:~$ ls -al .ssh/authorized_keys 
-rw-rw-r-- 1 student student 588 Sep 14 21:05 .ssh/authorized_keys

The final thing that we need to do is set up some specific file permissions on the authorized key file and the ssh directory. This is a security measure that ssh enforces to ensure other users cannot gain access to you account.
chmod 700 .ssh
chmod 644 .ssh/authorized_keys
We are done now we can login as student with key by
ssh student@127.0.0.1 -p 2222 -i ~/.ssh/id_rsa


Forcing Key Based Authentication
Final thing you need to do to secure the authentication process is to disable the password based logins. This will force all the users to only be able to login using key pair.
To do this you'll have to edit the configuration file for sshd. Which is the service that's running on the server listening for all the ssh connections.
sudo nano /etc/ssh/sshd_config
change
PasswordAuthentication yes
to 
PasswordAuthentication no
and save the file
Now the sshd service is currently running, and it only reads this configuration file when it's initially started up. So we need to restart the service so that it runs with the new configuration option we just made
sudo service ssh restart
Now all users will be foreced to login using key pair


Introduction to File Permissions
chmod
when we do ls -al we get permissions on file
student@vagrant-ubuntu-trusty-64:~$ ls -al
total 32
drwxr-xr-x 4 student student 4096 Sep 14 20:57 .
drwxr-xr-x 5 root    root    4096 Sep 14 19:59 ..
-rw------- 1 student student   21 Sep 14 20:43 .bash_history
-rw-r--r-- 1 student student  220 Sep 14 19:59 .bash_logout
-rw-r--r-- 1 student student 3637 Sep 14 19:59 .bashrc
drwx------ 2 student student 4096 Sep 14 20:14 .cache
-rw-r--r-- 1 student student  675 Sep 14 19:59 .profile
drwxrwxr-x 2 student student 4096 Sep 14 21:00 .ssh

drwx------
d means directory if it was - it meant file. then we have three sections of size 3 (total 9). for example rw- r-- r--
first one is owner he has read write access, - in third place means he can't execute the file
group in 2nd, group can only read
3rd is everyone, they too can only read


Owners and Groups
How do we identify who the owner and the group are?
drwx------ 2 student student 4096 Sep 14 20:14 .cache
-rw-r--r-- 1 student student  675 Sep 14 19:59 .profile
drwxrwxr-x 2 student student 4096 Sep 14 21:00 .ssh

Here second and third columns are user and group for each entry in the list. Even though they have same name they are in two entirely different things. The system has username student, which is the owner of the file. And a group named student which was automatically created when created when we made this user. This common practice, same name for user and group.
drwxr-xr-x 5 root    root    4096 Sep 14 19:59 ..
It points to home directory /home that's owned by root. And only root user can write to it. We can enter the directory because we have execute access and read by ls. But not write


Octal Permissions
We can translate permissions to numbers
r = 4
w = 2
x = 1
No permissions mean 0
By adding the numbers together, we end up with a result identifying the full set of permissions to apply
So if want to give read and execute permissions 4+1=5
Remember permissions are done in set of 3 --> individual, group and everyone
For example .bashrc has permissions 
-rw-r--r-- this will be converted to 644


chgrp and chown
What if we need to change a files group or owner? Through chown and chgrp (change group and owner)
.bash_history stores all the recent history of all the commands user has typed
The .bash_history file is created by the bash shell the first time you log out of your Linux system. This means that if you are logging into the system for the first time, it won't have been created yet. If you log out and log back in (e.g. vagrant ssh if you're using Vagrant here) then the file will be created.

cat .bash_history
we can read it write now, but if we change the group to root
sudo chgrp root .bash_history
We can still read it
cat .bash_history
The group has no permissions on this file, so there's pretty much no effect. Our ability to read this file right now is determined by the owner setting, not the group setting. BUt now if we chage owner from student to group
sudo chown root .bash_history
We can no longer view the content through
cat .bash_history
Now shange owner and group to student
sudo chgrp student .bash_history
sudo chown student .bash_history
You can also experiment with chown and chgrp using another file. To create an empty file named testfile, use the command touch testfile.


Intro to Ports
YOu now have a server sitting out there on the internet and this server is doing a lot of different things and talking to other devices on the internet. Depending on your application it could be responding to web requests, database queries, sending and receiving email, let's not forget handling the ssh sessions we have been using this whole time. But how does your server know which application is in charge of handling each type of request?
The answer is ports. Each of your applications are configured to respond to requests destined for a specific port. For example, a web server would by default respond on port 80, the default port for HTTP. We can control which ports our server is allowed to access request for, using and application called firewall.


Default Ports for Popular Services
HTTP 80
HTTPS 443
SSH 22
POP3 110
FTP 21
SMTP 25


Into to Firewalls
Just because our server can listen on every single port, for any type of request, that doesn't mean we should.
The rule of least privilege tells, we should only listen on ports required for our application to function correctly. 
We can configure which ports we want our server to listen to using application called firewall.
Let's say we have a firewall application which has ports 80, 21, 443 and 22. We currently have all the ports on file so we can't pass data from one side, internet, to another, my server.
You can say I am denying all requests.
BUt if I open one of these ports, like 80 here. I can now pass information through, the server on other side can now fully function as web server with added benefit of completely ignoring these requests that we know we are not interested in.


Intro to UFW
Ubuntu comes with firewall pre-installed called ufw. check status by
sudo ufw status
inactive right now
Let's start adding some rules to our firewall then we'll turn it on. We can deny all incoming requests initially and then open only what we need, helps manage rule. We'll establish this default deny incoming, by this rule
sudo ufw default deny incoming
We can also establish default rule for our outgoing connections, any request our server is trying to send to internet. allow all outgoing rule by
sudo ufw default allow outgoing
ufw still inactive
sudo ufw status
If activate now, we'll be blocking all incoming connections including ssh, which means our server will be dead in the water and completely inaccessible to us.


Configuring Ports in UFW
Let's start allowing the ports we know we'll need for the applications our server will be supporting. 
1. ssh, so we can continue administring this server
sudo ufw allow ssh
Go ahead and do that. BUt remember , we are using a Vagrant virtual machine and Vagrant set up our ssh on Port 2222.
So will need to allow all TCP connections to port 2222 for ssh to actually work in out scenario here.
sudo ufw allow 2222/tcp
2. HTTP server, for now we only want to support this basic HTTP server, so we can allow this by using 
sudo ufw allow www
And after that we can enable our firewall with
sudo ufw enable

This step here can be little hair raising because our ssh client is reliant upon these rules being correct. If all of a sudden you lose your ssh connection to your server, it's pretty clear that you messed up some of you rules. Some cloud providers do offer a way to regain access to your system through an external control panel. But many others, you are just out of luck at this point.
That's why configure your firewall pretty early in the server setup process.
Finally we can confirm all of our rules are setup as we indicated by using 
sudo ufw status 


Conclusion:
Based on your needs you can setup any type of server. Email servers, chat servers, web application servers. Generally only big difference between each of these is the software they have installed and the ports they have open

"LAMP" Stack (Linux, Apache, MySQL, PHP)   --->   https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu-14-04

"LEMP" Stack (Linux, nginx, MySQL, PHP)   --->   https://www.digitalocean.com/community/tutorials/how-to-install-linux-nginx-mysql-php-lemp-stack-on-ubuntu-14-04

PEPS Mail and File Storage --> https://www.digitalocean.com/community/tutorials/how-to-run-your-own-mail-server-and-file-storage-with-peps-on-ubuntu-14-04

Mail-in-a-Box Email Server  ---> https://www.digitalocean.com/community/tutorials/how-to-run-your-own-mail-server-with-mail-in-a-box-on-ubuntu-14-04

Lita IRC Chat Bot  ---->  https://www.digitalocean.com/community/tutorials/how-to-install-the-lita-chat-bot-for-irc-on-ubuntu-14-04
