The Rule of least privilege
Specific has only permissions required by him thats it


Becoming a super user
We don't sign in as super user / root but another user who can run command as super user  using root. helps prevent hacking


sudo vs. su
Best practice to not use su command. You can forget you are su and can do damage. No warnings are given.


Package Source list
List of various places we can go to get software. Package source list. All available package sources are listed in
cat /etc/apt/sources.list
Each of the rpos in above list will be referenced when we try to update or install new software


Updating available package list
Keep software upto date for security. Most don't update because changes may caause issue.
update by 
sudo apt-get update
The update command will run through all of the reposwe saw within /etc/apt/sources.list file, and it will check what all the software is available and what verions. THis command makes no changes to system. Just makes aware of latest software and versions


Upgrading Installed Packages
sudo apt-get upgrade
This early in the system you can upgrade everything. Later on when you actually have your web application running on this system, review list and test on non-production server.


Other Package Related Tasks
apt-get application is main interface to packages related stuff
check what by 
man apt-get
remove packages not required anymore by 
sudo apt-get autoremove
Install finger
sudo apt-get install finger


Discovering Packages
Ubuntu Packages search on website
https://packages.ubuntu.com/


Using Finger
finger displays info about users currently logged in
can pass user name to display extra info


Introduction to /etc/passwd/
Finger gets this info from /etc/passwd/. It store info about each user
cat /etc/passwd
Each line entry for single user
This is a very important file on your system! It's used to keep track of all users on the system. Run cat /etc/passwd and look at the output; each line is organized in this format:

username:password:UID:GID:UID info:home directory:command/shell

Let’s run through what each of those mean:
username: the user’s login name
password: the password, will simply be an x if it’s encrypted
user ID (UID): the user’s ID number in the system. 0 is root, 1-99 are for predefined users, and 100-999 are for other system accounts
group ID (GID): Primary group ID, stored in /etc/group.
user ID info: Metadata about the user; phone, email, name, etc.
home directory: Where the user is sent upon login. Generally /home/
command/shell: The absolute path of a command or shell (usually /bin/bash). Does not have to be a shell though!


INtroduction to User Management
It's a common pattern to diable ability to log in as root, and to only login as a different user that has the ability to use Sudo. This is a security measure since every bad guy out there knows every linux box has user named root. By disabling this account from remote login we remove a very easy attack vector. Now vagrant took care of this for us. They created a user name vagrant and we just type vagrant ssh from our terminal to automatically connect. BUt not every hosting provider is going to set something like this up for you. SO let's do this ourselves.


Creating a New User
sudo adduser student
give password: student
additional info will be asked can leave it to default or add something
confirm by
finger student


Connecting as the New User
ssh student@127.0.0.1 -p 2222
ssh --> application to connect remotely
student@ --> user
127.0.0.1 --> ip, local
-p 2222 --> port 2222
When vagrant setup our machine it automatically set up this port on our local machine to forward to the virtual machine


INtroduction to etc sudoers
Student can't run sudo
sudo cat /etc/passwd gives error
We switch back to user vagrant which can run sudo
User list allowed to do sudo is in
/etc/sudoers file
sudo cat /etc/sudoers
We see root there. In some system we can student in this file similar to how root is present using vi sudo
But ubuntu handles it differently. Bottom line says
#includedir /etc/sudoers.d
This is a common pattern helps prevent issue when distribution updates happen and /etc/sudoers file changes users lost
sudo ls /etc/sudoers.d
shows vagrant is there


Giving Sudo Access
First copy vagrant file and name it student and then edit it to replace vagrant with student inside file
sudo cp /etc/sudoers.d/vagrant /etc/sudoers.d/student
sudo nano /etc/sudoers.d/student
Now sudo works in student
sudo cat /etc/passwd works


Resetting Passwords
User can reset his password using passwd
To force student user password to expire
sudo passwd -e student


ANother Authentication Method
Hackers can try guessing user and password. Better way is key based authentication. Which depends on physical files in your local system and server


Public Key Encryption
The server sends a random message to client, client encrypts it with private key and send it back. Server will decrypt it with their public key and if that value same as they sent. everything check outs and client is authenticated.


Generating Key Pairs
We'll generate key pair on local machine. never share. if generated on server it was not always private.
We generate key using ssh-keygen
You will first be asked to give filename for the key pair --> /home/tdk/.ssh/id_rsa
Then give password --> kaushal
just in case someone happens to get these files. This pass phrase will stop them from using them.
Once done you'll see ssh-keygen has generated too files id_rsa and id_rsa.pub
We'll place id_rsa.pub on server to enable key based authentication


Supported Key Types
DSA
ECDSA
RSA
ED25519
SHA256 and MD5 are hashing algorithms that are not suitable for public key encryption


Installing Public Key
we do it manually
create .ssh in home directory of student
mkdir .ssh
This is a special directory where all of your key related files must be stored 
Then create a new file in this dir called authorized_keys
touch .ssh/authorized_keys
This is another special file that will store all of the public keys that this accound is allowed to use for authentication, with one key per line in that file
Now back on local machine
read out the contents on id_rsa.pub, copy that and paste in .ssh/authorized_keys using nano
nano .ssh/authorized_keys
student@vagrant-ubuntu-trusty-64:~$ ls -al
total 32
drwxr-xr-x 4 student student 4096 Sep 14 20:57 .
drwxr-xr-x 5 root    root    4096 Sep 14 19:59 ..
-rw------- 1 student student   21 Sep 14 20:43 .bash_history
-rw-r--r-- 1 student student  220 Sep 14 19:59 .bash_logout
-rw-r--r-- 1 student student 3637 Sep 14 19:59 .bashrc
drwx------ 2 student student 4096 Sep 14 20:14 .cache
-rw-r--r-- 1 student student  675 Sep 14 19:59 .profile
drwxrwxr-x 2 student student 4096 Sep 14 21:00 .ssh
student@vagrant-ubuntu-trusty-64:~$ ls -al .ssh/authorized_keys 
-rw-rw-r-- 1 student student 588 Sep 14 21:05 .ssh/authorized_keys

The final thing that we need to do is set up some specific file permissions on the authorized key file and the ssh directory. This is a security measure that ssh enforces to ensure other users cannot gain access to you account.
chmod 700 .ssh
chmod 644 .ssh/authorized_keys
We are done now we can login as student with key by
ssh student@127.0.0.1 -p 2222 -i ~/.ssh/id_rsa